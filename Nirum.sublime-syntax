%YAML 1.2
---
name: Nirum
file_extensions: [nrm, nirum]
scope: source.nirum

variables:
  ident: '[\-_a-zA-Z][\-\w]*/?(?:[\-_a-zA-Z][\-\w]*)?'

contexts:
  main:
    # enum
    - match: >-
        (?x)
          (\b(?:enum)\b)
          \s+({{ident}})
          \s*(=)
      captures:
        1: storage.type
        2: entity.name
        3: keyword.operator.assignment
      push:
        - match: ;
          pop: true
        - match: (\|)
          scope: keyword.operator
        - include: general
    - match: \b(enum)\b
      scope: storage.type
    # unboxed
    - match: >-
        (?x)
          (\b(?:unboxed)\b)
          \s+({{ident}})
          \s*(\()
      captures:
        1: storage.type
        2: entity.name
        3: punctuation.section.group.begin
      push:
        - match: \)
          scope: punctuation.section.block.end
          pop: true
        - include: type
    - match: \b(unboxed)\b
      scope: storage.type
    # record
    - match: >-
        (?x)
          (\b(?:record)\b)
          \s+({{ident}})
          \s*(\()
      captures:
        1: storage.type
        2: entity.name
        3: punctuation.section.group.begin
      push:
        - match: \)
          scope: punctuation.section.block.end
          pop: true
        - include: fields
        - include: general
    - match: \b(record)\b
      scope: storage.type
    # union
    - match: >-
        (?x)
          (\b(?:union)\b)
          \s+({{ident}})
          \s*(=)
      captures:
        1: storage.type
        2: entity.name
        3: keyword.operator.assignment
      push:
        - match: \(
          push:
            - match: \)
              scope: punctuation.section.block.end
              pop: true
            - include: params
            - include: general
        - match: ;
          scope: keyword.other
          pop: true
        - match: (\|)
          scope: keyword.operator
        - include: general
    - match: \b(union)\b
      scope: storage.type
    # service
    - match: >-
        (?x)
          (\b(?:service)\b)
          \s+({{ident}})
          \s*(\()
      captures:
        1: storage.type
        2: entity.name
        3: punctuation.section.group.begin
      push:
        - match: \)
          scope: punctuation.section.block.end
          pop: true
        - include: fields
        - include: method_params
        - include: general
    - match: \b(service)\b
      scope: storage.type
    # etc
    - include: general

  method_params:
    - match: \(
      push:
        - match: \)
          scope: punctuation.section.block.end
          pop: true
        - include: params
        - include: general

  type:
    - match: \[
      scope: keyword.other
      push: t_list
    - match: \{
      scope: keyword.other
      push: t_map
    - match: '[\]\}]'
      scope: invalid.illegal
    - match: \?
      scope: keyword.other
    - match: ({{ident}})
      scope: storage.type

  fields:
    - match: \[
      scope: keyword.other
      push: list
    - match: \{
      scope: keyword.other
      push: map
    - match: '[\]\}]'
      scope: invalid.illegal
    - match: ({{ident}})
      scope: storage.type
      push:
        - match: \?
          scope: keyword.other
        - match: ({{ident}})
          scope: string.unquoted
          pop: true
        - include: general

  params:
    - match: \[
      scope: keyword.other
      push: p_list
    - match: \{
      scope: keyword.other
      push: p_map
    - match: '[\]\}]'
      scope: invalid.illegal
    - match: ({{ident}})
      scope: storage.type
      push:
        - match: \?
          scope: keyword.other
          pop: true
        - match: ({{ident}})
          scope: variable.parameter
          pop: true
        - include: general

  t_list:
    - match: \?
      scope: keyword.other
    - match: \[
      push: t_list
    - match: \{
      scope: keyword.other
      push: t_map
    - match: ({{ident}})
      scope: storage.type
    - match: \}
      scope: invalid.illegal
    - match: \]
      scope: keyword.other
      pop: true
    - include: general

  t_map:
    - match: \?
      scope: keyword.other
    - match: \[
      push: t_list
    - match: \{
      scope: keyword.other
      push: t_map
    - match: ({{ident}})
      scope: storage.type
    - match: \]
      scope: invalid.illegal
    - match: \}
      scope: keyword.other
      pop: true
    - include: general

  list:
    - match: \?
      scope: keyword.other
    - match: \[
      push: t_list
    - match: \{
      scope: keyword.other
      push: t_map
    - match: ({{ident}})
      scope: storage.type
    - match: \]
      scope: keyword.other
      set:
        - match: '[\]\}\)]'
          scope: invalid.illegal
        - match: ({{ident}})
          scope: string.unquoted
          pop: true
    - include: general

  p_list:
    - match: \?
      scope: keyword.other
    - match: \[
      push: t_list
    - match: \{
      scope: keyword.other
      push: t_map
    - match: ({{ident}})
      scope: storage.type
    - match: \]
      scope: keyword.other
      set:
        - match: '[\]\}\)]'
          scope: invalid.illegal
        - match: ({{ident}})
          scope: variable.parameter
          pop: true
    - include: general

  map:
    - match: \?
      scope: keyword.other
    - match: \[
      push: t_list
    - match: \{
      scope: keyword.other
      push: t_map
    - match: ({{ident}})
      scope: storage.type
    - match: \}
      scope: keyword.other
      set:
        - match: '[\]\}\)]'
          scope: invalid.illegal
        - match: ({{ident}})
          scope: string.unquoted
          pop: true
    - include: general

  p_map:
    - match: \?
      scope: keyword.other
    - match: \[
      push: t_list
    - match: \{
      scope: keyword.other
      push: t_map
    - match: ({{ident}})
      scope: storage.type
    - match: \}
      scope: keyword.other
      set:
        - match: '[\]\}\)]'
          scope: invalid.illegal
        - match: ({{ident}})
          scope: variable.parameter
          pop: true
    - include: general

  general:
    # comma
    - match: \,
      scope: punctuation.separator
    - match: \;
      scope: keyword.other
    # line comment
    - match: \#
      scope: punctuation.definition.comment
      push:
        - meta_scope: comment.line
        - match: $\n?
          pop: true
    # identifier
    - match: ({{ident}})
      scope: string.unquoted
